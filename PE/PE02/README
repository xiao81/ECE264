
In this exercise, you will implement two functions:
(i) To convert from a char to int (char_to_int).
(ii) To process a string and return a long int represented in the string
(str_to_long_int).

// ~ Learning Goals ~ //

The main learning goals:
(1) How to "iterate" over a string, or an array of characters 
terminated with '\0'.
(2) How to convert a string into a number in different bases.
(3) How to set an error number when the base is invalid, or when
there is an overflow or underflow.
(4) How to test your own implementation.

// ~ Getting Started ~ //

The PE02 folder contains four files:
(1) answer02.c: this is the file that you hand in. It has the skeleton
of the functions in it, and you must "fill in the blanks".  However,
it is fine for you to have a different algorithm.  This is the only file you
have to include in the zip file to be submitted through Blackboard.
(2) answer02.h: this is a "header" file and it contains a declaration
and a brief description of the functions you will be writing for 
this exercise.
(3) pa02.c: You should use this file to write testing code that
runs the functions in answer02.c, in order to ensure their correctness.   
(4) README: this file.

To get started, browse through the answer02.h file, to see what code
needs to be written. You will be writing code in the answer02.c
file. You will also write code in the pa02.c file to test the functions
written in the answer02.c file.  

Follow the discussions below on how to compile and run your code, as
well as test and submit it.

// ~ Submitting Your Exercise ~ //

You must submit a zip file to blackboard.  The zip file contains
exactly one file:
(1) answer02.c (12 points)

You create the zip file using the following command.
 
> zip pe02.zip answer02.c 

Submit "pe02.zip" to blackboard.

// ~ (1a) Compiling Your Program ~ //

To compile your program, use the following command:

> gcc -Wall -Wshadow -Werror -g pe02.c answer02.c -o pe02

// ~ (1b) Running Your Program ~ //

To run your program, it depends on what you put in pe02.c.
You should decide how you want to write your test functions
and what input arguments your main function is expecting.
Therefore, I can't tell you what exactly you should type into the
terminal.  In its current form, you do not have to type in any input
arguments.  In general, it would look like this:

> ./pe02 "your input arguments"

Note that this should print:

Welcome to ECE264, we are working on PE02.

...

Some rudimentary test functions have been put in pe02.c.
However, you should put in more extensive test to 
thoroughly test your program.  

// ~ (1c) Testing Your Program ~ //

It is your responsibility to test the functions implemented in
answer02.c and ensure that they work.   How should you test your
implementation?

C has a function that would do exactly what you have been 
asked to do in this exercise for the str_to_long_int function.  
You have seen this function in the lecture notes, and that function 
is strtol.  

However, you are not allowed to call this function in your function, 
as I do not allow you to include stdlib.h in answer02.c.  If that 
function shows up in answer02.c, even if it is commented, you will 
receive ZERO for this exercise.

However, you are allowed to use strtol in your test functions in
pe02.c to verify that your functions work correctly.

// ~ (2) Running your program in Valgrind ~ //

I am not asking you to submit a log this time.  However, it is
always a good practice to check for abnormal behavior of your
program in Valgrind.

// ~ (3) Working with strings ~ //

For this exercise, we assume that the input address
supplied to the str_to_long_int function are not NULL (a compilation 
error will occur if it is NULL).  

A legal string as a number should be of the following form:

"possibly some white space" "optional +/- sign" "combination of 0..9, a..z, A..Z"

Here 'a'..'z', 'A'..'Z' are considered legal because we allow up to
a base of 36.  We will consider a base from 2 through 36.  We can't have a 
base of 1, because the only valid symbol will be '0', which is quite 
meaningless.  For a base from 2 through 10, the valid symbols are '0' 
through (base - 1).  We also include the letters 'a' through 'z' 
when we consider a base from 11 through 36.  'a' stands for 10 
(in base 10), 'b' for 11, ..., 'z' for 35.  Note that your functions 
should accept both upper case and lower case letters.

To check whether you have reached the end of a string, you
have to check whether you have '\0' character at that location.

There are a few functions that could be useful for you from 
ctype.h.  I list a few below:
(1) isspace
(2) isdigit
(3) isupper
(4) islower
(5) isxdigit

As there could be leading white space characters in the given string,
you have to skip over characters that are considered to 
be white space before the conversion.

The number represented in the string may start with a negative sign 
'-' or a positive sign '+'.  

Immediately following the optional +/- sign should be the legal
symbols for a particular base.

// ~ (3) Converting a string into a number ~ //

Your conversion should stop whenever you encounter an invalid symbol for
that base.   For example, for the following string "     +243adg",
the following sub-strings should be converted for the respective bases:
(1) for base 2, "     +", because '2' is not a valid symbol,
(2) for base 4, "     +2", because '4' is not a valid symbol,
(3) for base 11, "     +243a", becasue 'd' is the first invalid symbol.

For case (1), you should return 0, for (2), 2, and for case (3), 2*11*11*11
+ 4*11*11 + 3*11 + 10 = 3189.

(Interesting fact:  If you try to convert "0x10" using strtol for base 16,
you will get 16.   However, the str_to_long_int function should return 0.  
To find out more, please do a "man strtol".)

Given a string of valid symbols, how should we convert the string to a number?
Let's assume that the number will be stored in the variable ret_value, 
and you will return that value.

First, initialize the ret_value to 0.
Let's assume that are converting "243a" for base 11, we encounter '2' first. 
First, you have to convert a character '2' to a number 2.  We will update 
ret_value to ret_value * base + 2, which gives us 2.
When we encounter the next symbol '4', we convert '4' to a number 4, and
update ret_value to ret_value * base + 4, which gives us 26.
Next, convert '3' to number 3, update ret_value to 26 * base + 3 = 289.
Last, convert 'a' to number 10, and update ret_value to 289 * base + 10 = 3189.

The above steps assume that the sign is positive.  You have to make minor
changes to the steps when the sign is negative.

Seeing that you are repeating the steps of converting a character to
a number, and updating the ret_value using the same equation, you should
write these steps as an iteration (while-loop, for-loop, for example).
When should the iteration stop?  Perhaps when you encounter '\0' or 
when you encounter an invalid symbol for that base.

// ~ Setting error number in str_to_long_int ~//

The variable 'errno' is defined in errno.h.

If the base is invalid, the variable 'errno' should be set to
EINVAL (invalid argument) before you return from the str_to_long_int 
function.  

If the number to be converted is larger than LONG_MAX or smaller
than LONG_MIN, the variable 'errno' should be set to 
ERANGE before you return from the function.  
LONG_MAX and LONG_MIN are the largest and smallest long int, 
and they are defined in limits.h.  The returned value
number should be LONG_MAX or LONG_MIN, accordingly.

To determine whether you have a number greater than LONG_MAX or
LONG_MIN, what happens when you add any positive number to LONG_MAX?  
Similarly, what happens when you add any negative number to
LONG_MIN? You can easily write some code fragments in pe02.c to find out.

In pe02.c, we set errno to 0 before calling the str_to_long_int function.
After that, we print the errno to check for the status of the conversion.
In a more useful program, you would check for the errno when the returned 
value is LONG_MAX or LONG_MIN to see whether there was an overflow or 
underflow.

// ~ Grading ~ //

The 12 points are distributed as follows:
(1) Function char_to_int:  3 points.
(2) Function str_to_long_int:
    (i) The setting of errno: 3 points.
    (ii) Ability to convert properly, i.e., correctness of returned value: 
         5 points.
    (iii) No change to the input string: 1 point.

// ~ Summary ~ //


# Compile 
> gcc -Wall -Wshadow -Werror -g pe02.c answer02.c -o pe02

# Run -- you must write your own tests
> ./pe02 "your input arguments"

# Run under valgrind (also depends on whether you have input arguments)
> valgrind --tool=memcheck --leak-check=full --verbose --log-file=memcheck.log ./pe02

# Don't forget to *LOOK* at the log-file "memcheck.log"

# Create a zip file of your solution:
> zip pe02.zip answer02.c 

# Upload pe02.zip to Blackboard.
