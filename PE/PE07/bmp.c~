#include <stdlib.h>
#include <stdio.h>

#include "bmp.h"

/* check whether a header is valid
 * assume that header has been read from fptr
 * the position of the indicator of fptr is not certain
 * could be at the beginning of the file, end of the file or 
 * anywhere in the file
 * note that the check is only for this exercise/assignment
 * in general, the format is more complicated
 */

int Is_BMP_Header_Valid(BMP_Header* header, FILE *fptr) {
  // Make sure this is a BMP file
  if (header->type != 0x4d42) {
     return FALSE;
  }
  // skip the two unused reserved fields

  // check the offset from beginning of file to image data
  // essentially the size of the BMP header
  // BMP_HEADER_SIZE for this exercise/assignment
  if (header->offset != BMP_HEADER_SIZE) {
     return FALSE;
  }
      
  // check the DIB header size == DIB_HEADER_SIZE
  // For this exercise/assignment
  if (header->DIB_header_size != DIB_HEADER_SIZE) {
     return FALSE;
  }

  // Make sure there is only one image plane
  if (header->planes != 1) {
    return FALSE;
  }
  // Make sure there is no compression
  if (header->compression != 0) {
    return FALSE;
  }

  // skip the test for xresolution, yresolution

  // ncolours and importantcolours should be 0
  if (header->ncolours != 0) {
    return FALSE;
  }
  if (header->importantcolours != 0) {
    return FALSE;
  }
  
  // Make sure we are getting 24 bits per pixel
  // or 16 bits per pixel
  // only for this assignment
  if (header->bits != 24 && header->bits != 16) {
    return FALSE;
  }

  // fill in extra to check for file size, image size
  // based on bits, width, and height
  if (header->imagesize != (header->bits * header->width * header->height)/8){
    return FALSE;
    }
  if (header->size != header->imagesize + BMP_HEADER_SIZE){
    return FALSE;
  }


  return TRUE;
}

/* The input argument is the source file pointer. 
 * The function returns an address to a dynamically allocated BMP_Image only 
 * if the file * contains a valid image file 
 * Otherwise, return NULL
 * If the function cannot get the necessary memory to store the image, also 
 * return NULL
 * Any error messages should be printed to stderr
 */
BMP_Image *Read_BMP_Image(FILE* fptr) {

  
  if(fptr == NULL)
    {
      fprintf(stderr, "Can't open input file.\n");
      return NULL;
    }
  //Allocate memory for BMP_Image*;
   BMP_Image *bmp_image = (BMP_Image *)malloc(sizeof(BMP_Image));   
   if(bmp_image == NULL)
     {
       fprintf(stderr, "Error allocating memory\n");
       return NULL;
     }

  //Read the first 54 bytes of the source into the header
  BMP_Header* bheader = &(bmp_image->header);
  int n_read = fread(bheader,BMP_HEADER_SIZE,1,fptr);
  int check=0; 
  printf("read in %d header\n",n_read);
  
  // if read successful, check validity of header
  if(n_read == 1)
    {
      check = Is_BMP_Header_Valid(bheader,fptr);
    }
  else
    {
      fprintf(stderr, "Can't read image from file\n");
      return NULL;	
    }
  if(check == FALSE)
    {
      fprintf(stderr, "Input file not in expected format\n");
      return NULL;
    }

 
  // Allocate memory for image data
  bmp_image->data = (unsigned char *)malloc(bheader->imagesize);
  
  // read in the image data
 
  n_read = fread(bmp_image->data,sizeof(unsigned char),bheader->imagesize,fptr);
  printf("read in %d bytes\n",n_read);

  return bmp_image;
}

/* The input arguments are the destination file pointer, BMP_Image *image.
 * The function write the header and image data into the destination file.
 * return TRUE if write is successful
 * FALSE otherwise
 */
int Write_BMP_Image(FILE* fptr, BMP_Image* image) 
{
  if(fptr == NULL)
    {
      fprintf(stderr, "Can't open file for output\n");
      return FALSE;
    }
  if(image == NULL)
    {
      fprintf(stderr, "Error reading input file\n");
      return FALSE;
    }
   // write header
  BMP_Header* bheader = &(image->header);
  int n_write = fwrite(bheader,BMP_HEADER_SIZE,1,fptr);
 
  printf("write in %d header\n",n_write);
 
   // write image data
  n_write = fwrite((const void*)image->data,sizeof(unsigned char),image->header.imagesize,fptr);
  printf("write in %d bytes\n",n_write);

  return TRUE;
}

/* The input argument is the BMP_Image pointer. The function frees memory of 
 * the BMP_Image.
 */
void Free_BMP_Image(BMP_Image* image) {
  free(image->data);
  free(image);

  return;

}

/* Given a BMP_Image, create a new image that retains top half of the 
 * given image
 */
BMP_Image *Top_Half_BMP_Image(BMP_Image *image)
{
  int i;
  BMP_Image *image_top = (BMP_Image *)malloc(sizeof(BMP_Image));   
  
  if(image_top == NULL)
    {
      fprintf(stderr, "Error allocating memory\n");
      return NULL;
    }

  for(i=0;i<54;i++)
    {
      image_top[i] = image[i];
    }
  if(image->header.height % 2 == 0)
    {
      image_top -> header.height /= 2;
      image_top -> header.imagesize /= 2;
      image_top -> header.size =  image_top -> header.imagesize + BMP_HEADER_SIZE;
	}
  else
    {
      image_top -> header.height = (image_top -> header.height-1)/2;
      image_top -> header.imagesize = (image_top -> header.imagesize - (image_top->header.imagesize)/(image_top->header.height))/2+(image_top->header.imagesize)/(image_top->header.height);
      image_top -> header.size =  image_top -> header.imagesize + BMP_HEADER_SIZE;
    }
  image_top->data = (unsigned char *)malloc(image_top ->header.imagesize);
  for(i=0;i<(image_top->header.imagesize);i++)
    {
      image_top -> data[i] = image -> data[i]
    }
   
   return image_top;
}

/* Given a BMP_Image, create a new image that retains left half of the given 
 * image
 */
BMP_Image *Left_Half_BMP_Image(BMP_Image *image)
{

   return NULL;
}
