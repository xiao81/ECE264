// ~ Overview ~ //

This exercise will familiarize you with structures, dynamic memory allocation, and 
file operations.

// ~ Learning Goals ~ //

(1) To learn to read and write a structure into a file
(2) To learn to manipulate arrays 

// ~ Submitting Your Assignment ~ //

You must submit one zip file to blackboard. This zip file must
contain:

(1) pe07.c
(2) bmp.c

You create the zip file using the following command.
 
> zip pe07.zip pe07.c bmp.c 

// ~ Overview ~ //

The main purpose of this exercise is to familiarize you with
structures.  It will also give you more practice with file operations
and memory allocation.  

This exercise (and the next one) will gear you up for PA04, which
deals with an image format called BMP, which is commonly used in the Windows 
operating system.  Most web browsers are also able to read and display BMP files.
It is a modification of the exercise that Prof. Yung-Hsiang Lu gave to
his class.

In this exercise, you will read in a BMP file, and depending on the option
given, output a new BMP file that retains the top part of an image or the
left part of the image.

A BMP file has the following format:

/*
 * BMP files are laid out in the following fashion:
 *   --------------------------
 *   |          Header        |   54 bytes
 *   |-------------------------
 *   |    Palette (optional)  |   0 bytes (for 24-bit RGB images)
 *   |-------------------------
 *   |       Image Data       |   file size - 54 (for 24-bit images)
 *   --------------------------
 */

The header has 54 bytes, which are divided into the following fields.

/** 
 * BMP header (54 bytes).
 */

typedef struct _BMP_Header {
    uint16_t type;			// Magic identifier
    uint32_t size;			// File size in bytes
    uint16_t reserved1;			// Not used
    uint16_t reserved2;			// Not used
    uint32_t offset;			// Offset to image data in bytes from beginning of file (54 bytes)
    uint32_t DIB_header_size;		// DIB Header size in bytes (40 bytes)
    int32_t  width;			// Width of the image
    int32_t  height;			// Height of image
    uint16_t planes;			// Number of color planes
    uint16_t bits;			// Bits per pixel
    uint32_t compression;		// Compression type
    uint32_t imagesize;			// Image size in bytes
    int32_t  xresolution;		// Pixels per meter
    int32_t  yresolution;		// Pixels per meter
    uint32_t ncolours;			// Number of colors  
    uint32_t importantcolours;		// Important colors 
} BMP_Header;

Note that the number of bytes each field occupies can be obtained by
dividing the number 16 or 32 by 8.  For example, the field "type" occupies
2 bytes.  These fields are all integers.  An "uint" means unsigned,
and "int" means signed.  For example the fields "width" and "height" are
signed integers.  However, for simplicity, all the BMP files we have
will contain only positive integers.  You may assume that in your code.
Also, we are dealing wih uncompressed BMP format (compression field is 0).  

Because of the packing specified in the bmp.h file, you should be
able to use fread to read in the first 54 bytes of a BMP file and 
store 54 bytes in a BMP_Header structure.

Among all these fields in the BMP_Header structure, you have to pay attention 
to the following fields:

bits:  number of bits per pixel
width: number of pixel per row
height: number of rows
size: file size
imagesize: the size of image data (file size - size of header, which is 54)

We will further explain bits, width, height, and imagesize later.  You should use the 
following structure to store a BMP file, the header for the first 54 bytes of a given BMP file, 
and data should point to a location that is big enough (of imagesize) to store the image data
(color information of each pixel).

typedef struct _BMP_Image {
    BMP_Header header;
    unsigned char *data; 
} BMP_Image;

Effectively, the BMP_Image structure stores the entire BMP file.

Now, let's examine the fields bits, width, height, and imagesize in 
greater details.  The bits field records the number of bits used to
represent a pixel.  For this exercise (and the next exercise and assignment),
we are dealing with BMP files with only 24 bits per pixel or 16 bits per pixel.
For 24-bit representation, 8 bits (1 byte) for RED, 8 bits for GREEN, and 8 bits
for BLUE.  For 16-bit representation, each color is represented using 5 bits
(the most significant bit is not used).  For this exercise, we will use
only 24-bit BMP files to test your functions.  However, your code should be 
able to handle 16-bit format as well.  (Note that the header format is
actually more complicated for 16-bit format.  However, for this exercise
and the next exercise and assignment, we will use the same header format
for both 24-bit and 16-bit BMP files for simplicity.  So yes, we are abusing
the format!)

The width field gives you the number of pixels per row.  Therefore, the
total number of bytes required to represent a row of pixel for a 
24-bit representation is width * 3.  However, the BMP format requires
each row to be padded at the end such that each row is represented by multiples 
of 4 bytes of data.  For example, if there is only one pixel in each row,
we need an additional byte to pad a row.  If there are two pixels per row,
2 additional bytes.  If there are three pixels per row, 3 additional bytes.
If there are four pixels per row, we don't have too perform padding.
We REQUIRE you to assign value 0 to each of the padding byte.

The height field gives you the number of rows.  Row 0 is the bottom of the
image.  The file is organized such that the bottom row follows the header,
and the top row is at the end of the file.  

The imagesize field is height * amount of data per row.  Note that the 
amount of date per row includes padding at the end of each row.

// ~ functions to be written in bmp.c ~//

(2 points)
// Read BMP_Image from a given file
//
BMP_Image *Read_BMP_Image(FILE *fptr);

This function reads from a file a BMP image, and stores the contents
of the file in BMP_Image structure.  It returns the address of the 
BMP_Image structure in which the file contents are stored.  If the
given file pointer contains an invalid BMP file (wrong format), a NULL
pointer should be returned.

This are the basic steps:

(1)    Read the 54-byte header into memory
(2)    Check that the data in the header is valid 
       (use Is_BMP_Header_Valid to check)
(3)    If valid, allocate space for the image data and read the image data 
       (which is the file size minus the 54 bytes of the header), else
       return NULL.

Do not close the file pointer.  If there are issues allocating memory or
reading the file, the function should return NULL.

(2 points)
// Check the validity of the header with the file from which the header is read
//
int Is_BMP_Header_Valid(BMP_Header *bmp_hdr, FILE *fptr);

Check whether the bmp_hdr is valid.  The code is partially written.
You only have to fill in the part to check the fields "size", "imagesize"
and see whether they match up with the given "bits", "width", and "height" 
fields (see the description in the Overview).  Return TRUE is the header 
is valid; FALSE otherwise.

(2 points)
// Write BMP_Image to a given file
//
int Write_BMP_Image(FILE *fptr, BMP_Image *image);

Given a output file pointer, and an image file, write to the output file
as follows:

1.	Write the 54-byte header into the file
2.	Write the image data into the file (again, the file size from the header minus 54 bytes)

Do not close the file pointer and do not free the image.

Return TRUE if write is successful; FALSE otherwise.

(0 points)
// Free memory in a given image
//
void Free_BMP_Image(BMP_Image *image);

(2 points)
// Given a BMP_Image, create a new image that retains top half of the 
// given image
//
BMP_Image *Top_Half_BMP_Image(BMP_Image *image);

The returned value should be an address that points to a
BMP_Image structure that contains the top half of the given image.
The header of the new structure should be valid, such that if the
returned address is passed to the Write_BMP_Image function,
a valid BMP file will be stored.  Padding with appropriate number
of bytes for each row should be performed, and these padding bytes
should be assigned value 0.

If the given image has a height of (2n+1) rows, the new image
should have n+1 rows.  If the given image has a height of 2n rows, the
new image should have n rows.

If there is a problem with memory allocation, return NULL.

(2 points)
// Given a BMP_Image, create a new image that retains left half of the given image
//
BMP_Image *Left_Half_BMP_Image(BMP_Image *image);

The returned value should be an address that points to a
BMP_Image structure that contains the left half of the given image.
The header of the new structure should be valid, such that if the
returned address is passed to the Write_BMP_Image function,
a valid BMP file will be stored.  Padding with appropriate number
of bytes for each row should be performed, and these padding bytes
should be assigned value 0.

If the given image has a row of (2n+1) pixels, the new image
should have n+1 pixels per row.  If the given image has a row of 2n pixels, the
new image should have a row of n pixels.

If there is a problem with memory allocation, return NULL.

You may have to declare and define other functions in bmp.c.

// ~ Function(s) to be written in pe07.c ~ // 

(2 points) Your main function should expect an argument specifying one of 
two options argv[1]:

"-t": to produce a new BMP file (argv[3]) that contains the top half 
      of the image in argv[2].
      If argv[2] does not provide you a valid BMP file, you should not
      produce a new BMP file, and you should return EXIT_FAILURE.

"-l": to produce a new BMP file (argv[3]) that contains the left half 
      of the image in argv[2].
      If argv[2] does not provide you a valid BMP file, you should not
      produce a new BMP file, and you should return EXIT_FAILURE.

      If for whatever reasons (insufficient arguments, memory allocation 
      problem, file opening issue, format issue), the cropping cannot be 
      performed, the output should not be printed and you should return 
      EXIT_FAILURE.

others: print an error message to stderr and return EXIT_FAILURE.

Whenever you encounter errors and you want to print an error message,
use stderr for printing, not stdout.  In such a case, always return 
EXIT_FAILURE.

Return EXIT_SUCCESS only if it is a successful cropping.

You are responsible for opening and closing files, allocating and deallocating
memory.

// ~ error messages ~ //

If you want to print error messages, use one of the following statements
to print accordingly:

fprintf(stderr, "Error allocating memory\n");
fprintf(stderr, "Error reading input file\n");
fprintf(stderr, "Input file not in expected format\n");
fprintf(stderr, "Error writing to output file\n");
fprintf(stderr, "Insufficient arguments.\n");
fprintf(stderr, "Invalid option.\n");
fprintf(stderr, "Can't open input file.\n");
fprintf(stderr, "Can't read image from file\n");
fprintf(stderr, "Can't open file for output\n");
fprintf(stderr, "Can't halve the size of the image\n");

Note that all messages are printed to stderr (not stdout).
Printing to stdout will result in grading problems.

// ~ How do you test your functions ~ //

The folder "images" contains some images that are of the correct format.
The folder "results" contains some cropped images.  If you see "tout.bmp",
it means the top portion is retained.  If you see "lout.bmp", it means
the left half is retained.
The folder "corrupted" contains some corrupted images (Most of these images
can still be displayed properly, but for this exercise, they are considered
to be corrupted.)

You can use the "diff" function in linux to compare two files.

// ~ WARNINGS ~ //

The following gcc command will be used for compilation:

gcc -Wall -Werror -Wshadow -g pe07.c bmp.c -o pe07

If you code does not compile, you will get zero for this exercise.

We will check for memory leakage.  Memory leakage will result in 
a heavy penalty.
