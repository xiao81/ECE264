In this exercise, you will implement 
a recursive function to compute the nth Fibonacci number
in log n run-time complexity.  You would actually
have to write two functions, with one calling the
logarithmic recursive Fibonacci function.

// ~ Learning Goals ~ //

The main learning goal:
(1) How to write a recursive function

// ~ Getting Started ~ //

The PE04 folder contains six files:
(1) utility.h: this is the file that you should include in pe04.c and 
answer04.c.  It contains functions for me to count the number of recursive 
calls you have made in your functions.   That way, I can check whether 
the number of recursion calls you have made is reasonable.
(2) utility.o: this is the object code that I have compiled.  It contains the
functions declared in utility.h.  However, these functions are blackboxes 
because you have no access to the source code.
(3) answer04.h:  this is the file that declares the function that
you have to write.
(4) answer04.c:  this is the file that you have to turn in.  You have to 
define the recursive function.
(5) pe04.c:  This file is provided for you call the function defined in answer04.c.
(6) README: this file.

You will be writing code in the answer04.c file. 

// ~ Submitting Your Exercise ~ //

You must submit a zip file to blackboard.  The zip file contains
exactly one file:
(1) answer04.c (12 points)

You create the zip file using the following command.
 
> zip pe04.zip answer04.c 

Submit "pe04.zip" to blackboard.

// ~ (1a) Compiling Your Program ~ //

To compile your program, use the following command:

> gcc -Wall -Wshadow -Werror -g pe04.c answer04.c utility.o -o pe04

// ~ (1b) Running Your Program ~ //

To run your program, you type in, for example, the following command at a terminal

> ./pe04 100

Your program should print the 100th Fibonacci number and the
number of recursions required for the computation.

// ~ (2) Running your program in Valgrind ~ //

I am not asking you to submit a log this time.  However, it is
always a good practice to check for abnormal behavior of your
program in Valgrind.

// ~ (3) nth Fibonacci number for an even n -- Recursion ~//


Consider the Fibonacci sequence:
F(0) = 0, F(1) = 1, F(2) = 1, F(3) = 2, ..., F(n) = F(n-1) + F(n-2).

Given n = 2m, an even number, we can compute F(n) = F(2m) and F(n - 1) = F(2m - 1) as follows:

F(n - 1) = F(2m − 1) = F(m − 1)F(m - 1) + F(m)*F(m),
F(n) = F(2m) = 2*F(m − 1)F(m) + F(m)*F(m),

Let us consider an example where we want to compute F(100). 
We would use the above two equations as follows:

F(100) and F(99): have to compute F(50) and F(49)

F(50) and F(49): have to compute F(25) and F(24)

Now F(25) is an odd number, but F(24) is an even number.
Assume that you compute
 
F(24) and F(23): have to compute F(12) and F(11)

Do you know how to combine F(24) and F(23) to obtain F(25)?
Of course, you know.

Alternatively, you can compute

F(26) and F(25): have to compute F(13) and F(12)
Do you know how to combine F(26) and F(25) to give you F(24)?
Of course, you know.

Now, let's assume that we use F(24) and F(23), and so 
we have to compute F(12) and F(11):

F(12) and F(11): have to compute F(6) and F(5)

F(6) and F(5): have to compute F(3) and F(2)

To consistent, we assume that we will compute F(2) and
F(1) and then combine them to form F(3).

F(2) and F(1): have to compute F(1) and F(0).

Do you know F(1) and F(0)?  Yes, you know, of course.

// ~ (3a) Logarithmic Fibonacci function for an even n -- Recursion ~//

You have to implement a recursive function logFibonacci, which takes in 
three parameters.  The first parameters gives you an even n 
(you don't have to check that it is even because the caller function should 
only pass in an even n).  The function should compute the nth Fibonacci
number and the (n-1)st Fibonacci number.  These numbers should be stored
in the locations pointed to by the addresses in the second and third
parameter.

// ~ (3b) Fibonacci function for arbitary n -- not Recursion ~//

This function is not recursive, but should call the recursive Logarithmic
Fibonacci function.  However, note that the logarithmic Fibonacci function
takes in only an even n.  Therefore, when n is odd, you cannot use n as a
parameter to the logarithmic Fibonacci function.  In other words, 
you have to perform pre-processing and/or post-processing work to make this work.

// ~ Grading ~ //

The 12 points are distributed as follows:
(1) logFibonacci function:  8 points.
(2) Fibonacci function: 4 points.
