#ifndef PA02_H
#define PA02_H 

#define CORN 'X'
#define GRASS ' '
#define MOWED '.'

#include <stdio.h>

/* Given two filenames, first one is a given maze, the second one is to */
/* be written with the directions */
/* If the maze file does not exist, you should immediately return and */
/* do nothing else */
/* the directions are in the form of a series of characters */
/* 'N', 'S', 'E', 'W', without spacing (and without the quotes). */
/* There should be just a single line, without a terminating newline */
/* character. In other words, to the vi editor, it is an incomplete file */
/* you are to assume that you start from the top-most, left-most entry */
/* of the maze.  Therefore, the first direction is always 'S' */
/* The directions should allow you to cover all grass locations */
/* reachable from the top-most, left-most entry.  You should not mow */
/* locations with corns as that would destroy the maze.  You should also */
/* not allow the mower to go out of bound of the maze */
/* You also have to mow all other opening(s) of the maze */
/* Note that the maze can be generated by amaze, or some combinations of */
/* the maze expansion functions that you have written in PE06 */
/* the mower has to return to the starting location at the end of mowing */
/* you may assume that the maze file, if it exists, is in the correct format */

void Get_mowing_directions(char *mazefile, char *directionfile)
			__attribute__((nonnull));

/* Given three filenames, first one is a given maze, the second one is a */
/* direction file (a series of characters 'N', 'S', 'E', 'W'), you are */
/* to simulate the movement of the mower according to the directions */
/* given in the direction file. The mowed maze will be stored in the third file. */
/* If the maze file does not exist, you should immediately return -1 and */
/* do nothing else */
/* If the direction file does not exist, you should immediately return */
/* -1 and do nothing else */
/* You should simulate until you reach the end of file of the direction */
/* file or encounter an invalid direction */
/* you should print the mowed corn maze into the third given filename, the */
/* mowedfile, with mowed locations represented by '.' */
/* if you encounter an invalid direction (wrong character, try to mow */
/* a location with corns, try to move the mower out of bound) */
/* you should return -1 */
/* do not change a location with corns to a mowed location */
/* if the mower does not return to the starting opening, return -1 */
/* If the mower successfully return to the starting location with valid */
/* directions in the direction file, you should return the number of locations */
/* with grass but not mowed */
/* you may assume that the maze file, if it exists, is in correct format */

int Simulate_mowing(char *mazefile, char *directionfile, char *mowedfile)
			__attribute__((nonnull));

#endif
